
//BELMAN FORD ALGORITHM CONSIDERING 0 AS SOURCE ,EDIT ACCORDINGLY 
//BEWARE OF MISTAKE OF CASES WHEN I==J ,IF U DONT WANT THEM ,SET THEM INFINITY CAREFULLY 
n = number of vertices and m = number of edges...
ll n,m;cin>>n>>m;
    for(ll i=1;i<=n;i++)
    {
        dis[i]=1e12+4;
    }
    for(ll i=0;i<m;i++)
    {
        ll a,b,c;
        cin>>a>>b>>c;
        v[i].pb(a); v[i].pb(b); v[i].pb(c);
//a->node b->node c->cost
        
    }
//cycle detection... usually we iterate n-1 times but we iterate n times and see if a distance is becoming smaller in the nth iteration that means cycle is present....
    ll x= -1;
    for(ll i=0;i<=n-1;i++)
    {
        ll j=0;x=-1;
        while(v[j].size())
        {
            if(dis[v[j][0]]+v[j][2]<dis[v[j][1]])
            {
                dis[v[j][1]]=dis[v[j][0]]+v[j][2];
			x=v[j][0];
            }
            j++;
        }
    }
if(x!=-1)
{
vi cycle;
       for(ll i=0;i<n;i++)x=par[x];
//here we traverse n times the parent so we are sure that we have chosen such x which is inside the cycle as x which is outside the cycle can also be 
Reduced ....
       ll p =x;
       
       while(p!=x || !cycle.size())
       {
           cycle.pb(p);
           p=par[p];
           
       }
       
       cycle.pb(cycle[0]);
       reverse(cycle.begin(),cycle.end());
       cout<<"YES"<<endl;
       for(auto it:cycle)cout<<it<<" ";return;
}
	
